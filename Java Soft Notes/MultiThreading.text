What is Multitasking?
Multitasking means doing multiple tasks at the same time.

Just like humans can:

Talk on the phone while walking

Listen to music while cooking

Computers can also perform multiple tasks simultaneously — this is called multitasking.

💻 In Computers:
Multitasking allows the CPU to switch between tasks so quickly that it feels like everything is happening at the same time.

✅ Two Main Types of Multitasking:

Type	Description
Process-based	Multiple programs/processes run at the same time
Thread-based	A single program runs multiple tasks (threads) at the same time
🔹 1. Process-based Multitasking
Each task is a separate program.

Example: You open Chrome, Spotify, and Word at the same time — each is a separate process.

Each process has its own memory space.

✅ Example in OS: Opening MS Word + Zoom + Calculator.

🔹 2. Thread-based Multitasking
A single program has multiple threads running simultaneously.

More lightweight and faster than process-based.

Threads share the same memory.

✅ Example in Java: In a music player app:

One thread plays music.

Another thread updates the UI.

Another thread downloads the album cover.

***************************************************************************
What is Multithreading in Java?
Multithreading is Java's way of doing thread-based multitasking —
letting a program do multiple things at the same time using threads.

✅ What is a Thread?
A thread is a lightweight subprocess.
Think of it as:
.A unit of work
.Running independently, but inside the same program
.Shares the same memory with other threads

🧠 Real-Life Example:
Imagine a restaurant:

🍽️ One waiter (main thread) takes orders.

🔥 A cook (thread 1) prepares food.

🧼 Another person (thread 2) washes dishes.

All working at the same time but within the same restaurant (Java program).

**************************************************************************************
What Are the Ways to Create Threads in Java?
Java provides 3 main ways to create threads:

By extending the Thread class

By implementing the Runnable interface

By using ExecutorService (Thread pool) — used in large-scale/multithreaded applications (advanced and recommended in production)

1️⃣ Extending the Thread Class
✅ Concept:
You create a class that extends the Thread class and override the run() method. Then call start() to begin a new thread.

💻 Code:

class MyThread extends Thread {
    public void run() {
        for (int i = 1; i <= 3; i++) {
            System.out.println("🍔 Cooking - " + i);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        MyThread t1 = new MyThread();
        t1.start();  // Starts the thread

        for (int i = 1; i <= 3; i++) {
            System.out.println("🧾 Taking Order - " + i);
        }
    }
}
🧠 Analogy:
You run a fast food shop.

One person (Thread 1) is cooking.

Another (main thread) is taking orders.

They both run at the same time.

2️⃣ Implementing the Runnable Interface
✅ Concept:
You define the task logic inside the run() method of a class that implements Runnable. Then, create a Thread object and pass the Runnable object to it.

💻 Code:

class ChatBot implements Runnable {
    public void run() {
        for (int i = 1; i <= 3; i++) {
            System.out.println("🤖 Bot is replying - " + i);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        ChatBot bot = new ChatBot();
        Thread t1 = new Thread(bot);
        t1.start();  // Starts thread

        for (int i = 1; i <= 3; i++) {
            System.out.println("👤 User typing - " + i);
        }
    }
}
🧠 Analogy:
You're chatting with a bot:

The bot replies automatically (thread 1).

You’re typing a message (main thread).

✅ Runnable is more flexible than Thread, because:

You can still extend other classes

It decouples task from thread — better for large apps
*******************************************************************************************

Defining a thread there is two ways :
1.By extending Thread Class
2.By implementing Runnable interface

1. Thread Class
The Thread class is used to create and control threads.
You can create a custom thread by extending the Thread class.
The thread’s task is written inside the run() method.
The thread is started using the start() method.

2. Runnable Interface
Runnable is a functional interface with a single run() method.
It is used to define the task a thread should perform.
It is preferred over extending the Thread class.
Useful with lambda expressions and thread pools.

3. start() Method
The start() method is used to begin a new thread.
It creates a new call stack for the thread and internally calls the run() method.
Calling run() directly will not start a new thread; it will run on the current thread.

4. run() Method
This method contains the code that will be executed by the thread.
It is called automatically when the start() method is invoked.
It can be overridden in the Thread class or defined in a Runnable implementation.

5. sleep() Method
The sleep() method pauses the execution of the current thread for a specified time.
It takes time in milliseconds as an argument.
It throws InterruptedException, which must be handled.
Useful for simulating delays, controlling task execution timing, or creating wait intervals.





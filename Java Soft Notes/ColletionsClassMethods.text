1. sort(List<T> list)
Purpose: This method is used to sort a list in its natural (ascending) order. It modifies the original list.

Common Use: Sorting lists of numbers, strings, or other objects that implement the Comparable interface.

Example:

List<Integer> numbers = Arrays.asList(5, 2, 9, 1, 3);
Collections.sort(numbers);
System.out.println(numbers);  // Output: [1, 2, 3, 5, 9]
------

2. reverse(List<?> list)
Purpose: This method reverses the order of elements in the list. It modifies the original list.

Common Use: Reversing the order of elements, especially when you want to display data in the opposite order.

Example:

List<String> fruits = Arrays.asList("Apple", "Banana", "Cherry");
Collections.reverse(fruits);
System.out.println(fruits);  // Output: [Cherry, Banana, Apple]
------

3. shuffle(List<?> list)
Purpose: This method shuffles the elements of the list randomly. It also modifies the original list.

Common Use: Randomizing the order of elements, often used in games, simulations, or for random sampling.

Example:

List<String> deck = Arrays.asList("Ace", "2", "3", "4", "5");
Collections.shuffle(deck);
System.out.println(deck);  // Output could be something like: [3, Ace, 5, 4, 2]
------

4. min(Collection<? extends T> coll)
Purpose: This method returns the minimum element of the collection, according to the natural ordering (or according to a specified Comparator if provided).

Common Use: Finding the smallest element in a collection (such as the minimum score, price, or value).

Example:

List<Integer> numbers = Arrays.asList(10, 4, 7, 2);
Integer min = Collections.min(numbers);
System.out.println(min);  // Output: 2
-------

5. max(Collection<? extends T> coll)
Purpose: This method returns the maximum element of the collection, according to the natural ordering (or according to a specified Comparator if provided).

Common Use: Finding the largest element in a collection (such as the highest score, price, or value).

Example:

List<Integer> numbers = Arrays.asList(10, 4, 7, 2);
Integer max = Collections.max(numbers);
System.out.println(max);  // Output: 10
-------

6. frequency(Collection<?> c, Object o)
Purpose: This method returns the number of occurrences of the specified object in the collection.

Common Use: Counting the frequency of an element in a collection, such as determining how often a specific item appears in a list.

Example:

List<String> colors = Arrays.asList("Red", "Blue", "Green", "Blue", "Red");
int frequency = Collections.frequency(colors, "Blue");
System.out.println(frequency);  // Output: 2
---------

7. copy(List<? super T> dest, List<? extends T> src)
Purpose: This method copies all elements from the source list to the destination list.

Common Use: Copying data from one list to another.

Example:

List<String> source = Arrays.asList("A", "B", "C");
List<String> dest = new ArrayList<>(Arrays.asList("X", "Y", "Z"));

Collections.copy(dest, source);
System.out.println(dest);  // Output: [A, B, C]

---------
